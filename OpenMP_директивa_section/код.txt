#include <stdio.h>
#include <omp.h>
#include <stdlib.h>
#include <limits.h>

#define ROWS 6
#define COLS 8

int main() {
    int d[ROWS][COLS];
    int i, j;
    double sum = 0.0;
    int min = 101; 
    int max = 0;   
    int count_mult_of_3 = 0;

    #pragma omp parallel for private(i, j) shared(d)
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            d[i][j] = rand() % 100; 
        }
    }

    //Вывод матрицы
    printf("Matrix d:\n");
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            printf("%3d ", d[i][j]);
        }
        printf("\n");
    }
    printf("\n");


    #pragma omp parallel sections shared(sum, min, max, count_mult_of_3)
    {
      //находим среднее арифм
        #pragma omp section
        {
            int thread_num = omp_get_thread_num();
            double local_sum = 0.0;
            
            for (i = 0; i < ROWS; i++) {
                for (j = 0; j < COLS; j++) {
                    local_sum += d[i][j];
                }
            }
            #pragma omp atomic
            sum += local_sum;
            printf("Thread %d: Arithmetic mean = %.2f\n", thread_num, local_sum / (ROWS * COLS));
        }
       //Находим минимальный и максиьальный эл
        #pragma omp section
        {
            int thread_num = omp_get_thread_num();
            int local_min = min;
            int local_max = max;
            
            for (i = 0; i < ROWS; i++) {
                for (j = 0; j < COLS; j++) {
                    if (d[i][j] < local_min) local_min = d[i][j];
                    if (d[i][j] > local_max) local_max = d[i][j];
                }
            }
            printf("Thread %d: Min value = %d, Max value = %d\n", thread_num, local_min, local_max);
        }

        // Находим все эл которые делятся на 3
        #pragma omp section
        {
            int thread_num = omp_get_thread_num();
            int local_count_mult_of_3 = 0;
           
            for (i = 0; i < ROWS; i++) {
                for (j = 0; j < COLS; j++) {
                    if (d[i][j] % 3 == 0) local_count_mult_of_3++;
                }
            }
            printf("Thread %d: Number of elements divisible by 3 = %d\n", thread_num, local_count_mult_of_3);
        }
    }

    
    return 0;
}