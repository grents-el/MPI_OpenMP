#include <stdio.h>
#include <mpi.h>
#include <math.h>

double f(double x, double y) {
    return (x * x - y * y) * sin(M_PI * (x - y) * (x - y));
}

double double_integral(double x_lower, double x_upper, double y_lower, double y_upper, int n, int size) {
    int local_n=n/size;    
    double hx = (x_upper - x_lower) / n;
    double hy = (y_upper - y_lower) / local_n;
    double sum = 0.0;
   
    for (int i = 0; i < n; ++i) {
        double x = x_lower + (i + 0.5) * hx; // средняя точка для каждого интеграла  x
        for (int j = 0; j < local_n; ++j) {
            double y = y_lower + (j + 0.5) * hy; // средняя точка для каждого интеграла y
            if (fabs(y) < x && x < 1 - fabs(y)) { sum += f(x, y); }       }
    }
    return hx * hy * sum;
}

int main(int argc, char** argv) {
    int rank, size;
    double x_lower = 0.0, x_upper = 1.0;
    double y_lower = -0.5, y_upper = 0.5; // область  y определенная в  D
    int n = 10000; 
    double integral, st, fin;
   

    MPI_Init(&argc, &argv);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);

    st = MPI_Wtime();

    // раздиление y между процессами
    double y_segment = (y_upper - y_lower) / size;
    double local_y_lower = y_lower + rank * y_segment;
    double local_y_upper = local_y_lower + y_segment;

    double local_integral = double_integral(x_lower, x_upper, local_y_lower, local_y_upper, n, size);

    // суммируем локальные интегралы 
    MPI_Reduce(&local_integral, &integral, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        fin = MPI_Wtime();
        printf("Integral: %.10f\n", integral);
        printf("Time: %f\n", fin - st);
    }

    MPI_Finalize();
    return 0;
}


