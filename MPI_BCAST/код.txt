#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <mpi.h>
#include <time.h>


#define ARRAY_SIZE 10

int main(int argc, char** argv) {
    int rank, size;
    double local_array[ARRAY_SIZE];
    double global_max;
    
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    srand(time(0) + rank);


    if (rank == 0) {
 	//printf("Massiv\n");

        for (int i = 0; i < ARRAY_SIZE; i++) {
            local_array[i] = cos(1.0 *(i+1) * rand() /(double) RAND_MAX);
	    printf("local[%d ] = %f\n\n",i ,local_array[i]);
        }
    }

    
    MPI_Bcast(local_array, ARRAY_SIZE, MPI_DOUBLE, 0, MPI_COMM_WORLD);

    
   // printf("rank %d\n",rank);

    for (int i = 0; i < ARRAY_SIZE && rank != 0; i++) {
        local_array[i] *= (rank);
	printf("local[%d ]* %d = %f\n", i ,rank,local_array[i]);

    }

    
    double local_max = local_array[0];
    for (int i = 1; i < ARRAY_SIZE && rank !=0; i++) {
        if (local_array[i] > local_max) {
            local_max = local_array[i];
	    printf(" rank %d , max %f\n\n", rank , local_max);
        }
    }

    
    MPI_Reduce(&local_max, &global_max, 1, MPI_DOUBLE, MPI_MAX, 0, MPI_COMM_WORLD);


    if (rank == 0) {
        printf("Global maximum: %f\n", global_max);
    }

    MPI_Finalize();
    return 0;
}
